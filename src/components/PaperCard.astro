---

import { type CollectionEntry } from 'astro:content';

export interface Props {
  paper: CollectionEntry<'papers'>;
  class?: string;
}

const { paper, class: className } = Astro.props;
const { title, affiliations = [], links, image } = paper.data;
const imageSrc = image ? (image.startsWith('/') ? image : `/${image}`) : null;
const linkEntries = links ? Object.entries(links) : [];
const titleText = typeof title === 'string' ? title : (title && title.text) ? title.text : '';
const titleHref = (title && typeof title === 'object' && title.url) ? title.url : null;

---

<article class:list={["pb-8", className]}>
  <article class:list={["pb-8", className]}>
    <div class="flex flex-row items-start gap-8">
      {/* 左侧图片 */}
      <div
        class="flex-shrink-0 flex items-center justify-center rounded-none p-2"
        style="max-width:298px; max-height:298px; overflow:visible; border-radius:0;"
      >
        {imageSrc ? (
          <img
            src={imageSrc}
            alt={titleText}
            class="object-contain max-w-85 max-h-80 w-auto h-auto rounded-none"
            style="border-radius:0;"
          />
        ) : (
          <div class="text-gray-400 text-xs">No Image</div>
        )}
      </div>

      {/* 右侧文字内容 */}
      <div class="flex-1 min-w-0">
        {/* 论文题目 */}
        <div class="mb-1">
          {titleHref ? (
            <h2 class="text-lg font-bold leading-snug line-clamp-2">
              <a href={titleHref} target="_blank" rel="noopener" class="hover:underline">{titleText}</a>
            </h2>
          ) : (
            <h2 class="text-lg font-bold leading-snug line-clamp-2">{titleText}</h2>
          )}
        </div>
        {/* 论文组织 */}
        <div class="mb-1">
          <span class="text-sm text-gray-600 dark:text-gray-400">{affiliations.join(' • ')}</span>
        </div>
        {/* 按钮区 */}
        <div class="flex flex-wrap gap-2 items-center mt-2">
          {linkEntries.map(([key, val]) => {
            const rawUrl = typeof val === 'string' ? val : (val && val.url) ? val.url : null;
            const url = rawUrl && String(rawUrl).trim() !== '' ? rawUrl : null;
            const color = typeof val === 'string' ? null : (val && val.color) ? val.color : null;
            const label = (typeof val === 'object' && val && val.label) ? val.label : key;
            if (url) {
              return (
                <a
                  href={url}
                  target="_blank"
                  class={`text-xs font-medium px-2 py-0.5 rounded ${color ? 'border hover:underline' : 'text-blue-600 hover:underline'}`}
                  style={color ? `color: ${color}; border-color: ${color}` : undefined}
                >
                  {label}
                </a>
              );
            }
            return (
              <span
                class={`text-xs font-medium px-2 py-0.5 rounded ${color ? 'border' : 'text-gray-500'}`}
                style={color ? `color: ${color}; border-color: ${color}` : undefined}
              >
                {label}
              </span>
            );
          })}
        </div>
      </div>
    </div>
  </article>
